I. Jeśli mamy klasę Dom, a w niej jest konstruktor, to pełni on metaforyczną funkcję dekoratora wnętrz.
d) dekorator wnętrz

Pozostałe funkcje spełnia:
a) Projektant domu - klasa?
b) Geodeta wymierzający działkę, na której ma stanąć dom - kompilator?
c) Budowniczy konkretnego domu - programista (tworzenie obiektu)

II. Wolno przeładować nazwę konstruktora. Jest to najczęściej przeładowywana funkcja składowa.

III. Konstruktor nie ma typu rezultatu.

IV. Jeśli mamy konstruktor klasy K, to może on być wywoływany w celu konstruowania obiektów z przydomkiem const:
c) dany konstruktor może być użyty przy tworzeniu obiektu const wtedy, gdy wszystkie składniki klasy inicjalizuje za pomocą listy inicjalizacyjnej (a nie w ciele konstruktora)

V. Klasa K, w której jest konstruktor wywoływany jednym argumentem typu double oraz konstruktor domniemany. Która z poniższych nie jest definicją obiektu klasy K? Czym jest w istocie?
a) K obiektA;
b) K obiektB = K();
c) K obiektC(); // to nie jest definicją obiektu - mówimy tylko, że obiektC to nazwa jakiejś funkcji
d) K obiektD(3.14);
e) K obiektE = K(3.14);

VI. Kiedy startują konstruktory obiektów:
- globalnego: jeszcze przed rozpoczęciem wykonywania funkcji main
- lokalnego (funkcji main()): w momencie, gdy program napotyka definicję tego obiektu

VII. Globalny obiekt klasy K jest dostępny tylko z głownego pliku: aby był dostępny również w innych plikach programu, należy na początku danego pliku zdeklarować jego nazwę wraz z przydomkiem extern (zewnętrzny).

VIII. Zakres ważności nazw i czas życia obiektów:
— globalny:
	- plik (zakres pliku) + deklaracja extern w innych plikach
	- cały czas wykonywania programu
— lokalny automatyczny:
	- zakres blokowy {} - od definicji do końca bloku
— lokalny statyczny:
	- zakres blokowy {} - od definicji do końca bloku
	- cały czas wykonywania programu
— tworzony operatorem new:
	- od wykonania new do wykonania delete
	- dostępny tak długo, jak pokazuje na niego choć jeden wskaźnik

IX. Destruktor nie może być wywoływany z żadnymi argumentami, oraz nie może zwracać żadnej wartości (nawet void).

X. Destruktor obiektu nie uruchamia się w momencie jak przestaje na niego pokazywać jakiś wskaźnik lub skończy się czas życia wskaźnika.

XI. Destruktor dla jakiegoś obiektu można wywołać jawnie - nie usunie wtedy obiektu, ale zachowa się jedynie jak "sprzątaczka".

XII. Wolno wywołać destruktor dla obiektu int. Nie jest to oficjalnie zabronione.

XIII. Konstruktor domniemany - z definicji to taki konstruktor, który można wywołać bez żadnego argumentu. Czyli nawet taki, który ma wszystkie argumenty domniemane!

XIV. Kompilator generuje konstruktor domniemany automatycznie tylko w przypadku, gdy klasa nie ma żadnego konstruktora.

XV. Konstruktor domniemany generowany przez kompilator ma przydomki:
b) public
e) inline

XVI. Na liście inicjalizacyjnej konstruktora mogą znaleźć się wyrażenia inicjalizujące niestatyczne składniki klasy z przydomkiem const. (w ciele konstruktora już nie)

XVII. Lista inicjalizacyjna nie może inicjalizować składnika static.

XVIII. Jeśli konstruktor definiowany jest na zewnątrz ciała swojej klasy, to lista inicjalizacyjna konstruktora towarzyszy:
b) definicji konstruktora

XIX. Kolejność umieszczania składników na liście inicjalizacyjnej nie ma żadnego znaczenia, ale niektóre kompilatory ostrzegają, że itak będzie to przeprowadzone wg porządku w programie.

XX. Kolejność pracy konstruktorów:
Obiekty składowe wewnątrz klasy, to jakby jej goście. Przy konstruowaniu obiektu — klasa najpierw daje pierwszeństwo gościom, a dopiero potem myśli o swoim konstruktorze.
1. najpierw wywołuje się konstruktor obiektu gościa pierwszego
2. potem ew. następne konstruktory gości wg porządku na liście
3. potem inicjalizacja składników klasy (domowników) wg porządku deklaracji w klasie
4. potem wykonanie ciała konstruktora danej klasy

XXI. Kolejność pracy destruktorów:
Odwrotnie niż w przypadku konstruktorów.
1. najpierw rusza do pracy destruktor klasy
2. dopiero potem wykonywane są destruktory obiektów składowych

XXII. Składników klasy typu const nie można inicjalizować w ciele konstruktora (jedynie na jego liście inicjalizacyjnej)

XXIII. Na liście inicjalizacyjnej można wywołać funkcje, wyrażenia a nawet funkcje składowe. Jednak w tym ostatnim przypadku trzeba pamiętać o kolejności inicjalizacji poszczególnych składników.

XXIV. Na liście inicjalizacyjnej można posłużyć się wyrażeniem korzystającym z innego składnika. Jednak trzeba pamiętać o kolejności inicjalizacji poszczególnych składników.

XXV. Może istnieć klasa, w której wszystkie konstruktory są private. Trzeba pamiętać że kompilator czasem potrzebuje użyć konstruktora domniemanego niejawnie np. w przypadku definiowania operatorem new tablicy kilku obiektów danej klasy. (wtedy otrzymamy błąd kompilacji)

XXVI. Formy deklaracji konstruktora kopiującego (bez argumentów domniemanych):
Tklasa::Tklasa( Tklasa & );
Tklasa::Tklasa( const Tklasa & );
Tklasa::Tklasa( volatile Tklasa & );
Tklasa::Tklasa( const volatile Tklasa & );

XXVII. Kiedy zostanie użyty konstruktor kopiujący:
b) przesłanie do funkcji obiektu klasy K przez wartość
d) zwrot rezultatu funkcji będącego obiektem klasy K przez wartość 

XXVIII. Konstruktor kopiujący klasy K - aby użyć go do zrobienia kopii obiektu const klasy K = konstruktor kopiujący musi zagwarantować nietykalność takiego obiektu. (Trzeba dodać przydomek const w deklaracji)
Tklasa::Tklasa( const Tklasa & );

XXIX. Jeśli chcielibyśmy zbudować w klasie K zawierającej składniki const klasy M konstruktor kopiujący, to konstruktor kopiujący klasy M również musi obiecywać nietykalność takich obiektów (const).

XXX. Korzystanie z generowanego automatycznie konstruktora kopiującego może prowadzić do błędów, w przypadku gdy składnikiem (daną składową) danej klasy jest np. wskaźnik. Wtedy dosłowna kopia takiego obiektu byłaby niepożądana.